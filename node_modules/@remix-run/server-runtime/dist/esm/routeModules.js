/**
 * @remix-run/server-runtime v2.9.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * @deprecated Use `LoaderFunctionArgs`/`ActionFunctionArgs` instead
 */

const ResponseStubOperationsSymbol = Symbol("ResponseStubOperations");

/**
 * A stubbed response to let you set the status/headers of your response from
 * loader/action functions
 */

/**
 * A function that handles data mutations for a route on the server
 */

/**
 * Arguments passed to a route `action` function
 */

/**
 * A function that handles data mutations for a route on the client
 * @private Public API is exported from @remix-run/react
 */

/**
 * Arguments passed to a route `clientAction` function
 * @private Public API is exported from @remix-run/react
 */

/**
 * A function that loads data for a route on the server
 */

/**
 * Arguments passed to a route `loader` function
 */

/**
 * A function that loads data for a route on the client
 * @private Public API is exported from @remix-run/react
 */

/**
 * Arguments passed to a route `clientLoader` function
 * @private Public API is exported from @remix-run/react
 */

/**
 * A function that returns HTTP headers to be used for a route. These headers
 * will be merged with (and take precedence over) headers from parent routes.
 */

/**
 * A function that defines `<link>` tags to be inserted into the `<head>` of
 * the document on route transitions.
 */

/**
 * A function that returns an array of data objects to use for rendering
 * metadata HTML tags in a route. These tags are not rendered on descendant
 * routes in the route hierarchy. In other words, they will only be rendered on
 * the route in which they are exported.
 *
 * @param Loader - The type of the current route's loader function
 * @param MatchLoaders - Mapping from a parent route's filepath to its loader
 * function type
 *
 * Note that parent route filepaths are relative to the `app/` directory.
 *
 * For example, if this meta function is for `/sales/customers/$customerId`:
 *
 * ```ts
 * // app/root.tsx
 * const loader = () => {
 *  return json({ hello: "world" } as const)
 * }
 * export type Loader = typeof loader
 *
 * // app/routes/sales.tsx
 * const loader = () => {
 *  return json({ salesCount: 1074 })
 * }
 * export type Loader = typeof loader
 *
 * // app/routes/sales/customers.tsx
 * const loader = () => {
 *   return json({ customerCount: 74 })
 * }
 * export type Loader = typeof loader
 *
 * // app/routes/sales/customers/$customersId.tsx
 * import type { Loader as RootLoader } from "../../../root"
 * import type { Loader as SalesLoader } from "../../sales"
 * import type { Loader as CustomersLoader } from "../../sales/customers"
 *
 * const loader = () => {
 *   return json({ name: "Customer name" })
 * }
 *
 * const meta: MetaFunction<typeof loader, {
 *  "root": RootLoader,
 *  "routes/sales": SalesLoader,
 *  "routes/sales/customers": CustomersLoader,
 * }> = ({ data, matches }) => {
 *   const { name } = data
 *   //      ^? string
 *   const { customerCount } = matches.find((match) => match.id === "routes/sales/customers").data
 *   //      ^? number
 *   const { salesCount } = matches.find((match) => match.id === "routes/sales").data
 *   //      ^? number
 *   const { hello } = matches.find((match) => match.id === "root").data
 *   //      ^? "world"
 * }
 * ```
 */

/**
 * An arbitrary object that is associated with a route.
 */

export { ResponseStubOperationsSymbol };
